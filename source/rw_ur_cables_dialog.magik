#% text_encoding = iso8859_1
# ************************************************************
#
# (c) 2022 Realworld Systems. All Rights Reserved.
# Date: 18 March 2022
# ************************************************************

_package sw
$

remex(:rw_ur_cables_dialog)
$

_pragma(classify_level=restricted)
def_slotted_exemplar(:rw_ur_cables_dialog,
	{
		{ :current_selection_ur1,_unset },
		{ :current_selection_ur2,_unset },
		{ :items,            _unset },
		{ :table_list,       _unset },
		{ :table_list2,  _unset },
		{ :styles,           _unset },
		{ :owner,            _unset },
		{ :grs,              _unset },
		{ :mapman,           _unset },
		{ :ed,               _unset },
		{ :ev,               _unset },
		{ :records,          _unset },
		{:list,      _unset, :writable},
		{:list2,      _unset, :writable},
		{:engine, _unset}
	},{:model})
$

_pragma(classify_level=restricted)
rw_ur_cables_dialog.define_shared_constant( :databus_consumer_data_types,
    { :map_selection },
    :public )

$
#rw_ur_cables_dialog.define_shared_variable(
#                 :items,_unset,:public)
#$


_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.new(_optional owner, framework)
	## 
	## 
	>> _clone.init(owner, framework)
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.init(owner, framework)
	## 
	##
	_super.init()

	.ev << gis_program_manager.cached_dataset(:gis)
	.owner << owner
	.grs << framework

	.mapman << .grs.plugin(:map_plugin)
	.ed << .grs.plugin(:editor_manager)
	.items << hash_table.new()
	.current_selection_ur1 << _unset
	.current_selection_ur2 << _unset
	
	# Data holder
	.table_list << rope.new()
	.table_list2 << rope.new()
	.records << rope.new()

	.engine << rw_ur_cables_engine.new(.owner, .grs)

	# Add dependent dialog to plugin
	_self.add_dependent(.owner)
        >> _self
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.activate_in( parent )
	## 
	##
	parent.title << "Check Underground Route For Possible Merge"
	top_outer << sw_container.new( parent, _unset, 1,
				       :outer_spacing, 4,
				       :row_spacing, 4,
				       :row_resize_values, {0,1},
				       :width, 900,
				       :height, 400 )

	first_con << sw_border_container.new( top_outer, _unset, 1,
					      :label, "",
					      :row_resize_values,{0,1})
	
	
	_self.build_toolbar( first_con )
	#_self.build_label_result( first_con )
	
	second_con << sw_border_container.new( top_outer, _unset, 2,
					      :label, "",
					      :width, 400,
					      :row_resize_values,{0})

	_self.build_table_ur1( second_con )
	_self.build_table_ur2( second_con )

	thirt_con << sw_border_container.new( top_outer, _unset, 1,
					      :label, "",
					      :width, 50,
					      :row_resize_values,{0})
	
	_self.build_toolbar_second( thirt_con )
	_self.build_label_result2( thirt_con )
	
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.build_toolbar( parent )
	## 
	##
	toolbar << sw_container.new( parent, 1, _unset,
				     :col_spacing, 15  
				)
	file_toolbar << sw_toolbar_container.new( toolbar, _false,
						  :background_type, :button_group,
						  :button_group_height, sw_item.default_item_height )


	sw_label_item.new( file_toolbar, "Object Id:")
	
	.items[:ur1] << sw_text_item.new( file_toolbar, :editable?, _false)
	.items[:ur1].text_items << {{:ur1,"Underground Route 1"}}
	

	.items[:add_ur1] << sw_button_item.new( file_toolbar,
					       :image, {:add_to_layout, :pni_tools},
					       :model, _self,
					       :selector, :get_ur1|()|,
					       :tooltip, "Set Undergroud Route 1" )

	.items[:goto1] << sw_button_item.new( file_toolbar,
					       :image, {:goto_object, :ui_resources},
					       :model, _self,
					       :selector, :goto1|()|,
					       :enabled?, _false,
					       :tooltip, "GoTo Undergroud Route 1" )
	
	.items[:goto_int1] << sw_button_item.new( file_toolbar,
					       :image, {:goto_internals, :pni_application},
					       :model, _self,
					       :selector, :goto_int1|()|,
					       :enabled?, _false,
					       :tooltip, "GoTo Internals Undergroud Route 1" )

	sw_label_item.new( file_toolbar, "Merge With :" )

	.items[:ur2] << sw_text_item.new( file_toolbar, :editable?, _false )
	.items[:ur2].text_items << {{:ur2,"Underground Route 2"}}


	.items[:add_ur2] << sw_button_item.new( file_toolbar,
					       :image, {:add_to_layout, :pni_tools},
					       :model, _self,
					       :selector, :get_ur2|()|,
					       :enabled?, _false,
					       :tooltip, "Set Undergroud Route 2" )
	.items[:goto2] << sw_button_item.new( file_toolbar,
					       :image, {:goto_object, :ui_resources},
					       :model, _self,
					       :selector, :goto2|()|,
					       :enabled?, _false,
					       :tooltip, "GoTo Undergroud Route 2" )
	
	.items[:goto_int2] << sw_button_item.new( file_toolbar,
					       :image, {:goto_internals, :pni_application},
					       :model, _self,
					       :selector, :goto_int2|()|,
					       :enabled?, _false,
					       :tooltip, "GoTo Internals Undergroud Route 2" )

	sw_label_item.new( file_toolbar, "        " )
	
	.items[:run_check] << sw_button_item.new( file_toolbar,
					       :image, {:run, :ui_resources},
					       :model, _self,
					       :selector, :get_result|()|,
					       #:enabled?, _false,
					       :tooltip, "Check " )

	.items[:clear] << sw_button_item.new( file_toolbar,
					       :image, {:clear, :ui_resources},
					       :model, _self,
					       :selector, :clear|()|,
					       :tooltip, "Clear" )


_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.build_toolbar_second( parent )
	## 
	##
	toolbar << sw_container.new( parent, 1, _unset,
				     :col_spacing, 15  
				)
	file_toolbar << sw_toolbar_container.new( toolbar, _false,
						  :background_type, :button_group,
						  #:col_alignment, :fill,
						  :button_group_height, sw_item.default_item_height )


	.items[:check_merge] << sw_button_item.new( file_toolbar,
					      :image, {:associate, :mit_base_gui},
					      #:image, {:nw_01_15_15_cur, :ui_resources},
					      :model, _self,
					      :enabled?, _false,
					      :selector, :check_merge|()|,
					      :tooltip, "" )
	
	.items[:clr_selection] << sw_button_item.new( file_toolbar,
					       :image, {:clear, :ui_resources},
					       :model, _self,
					       :enabled?, _false ,
					       :selector, :clear_selection|()|,
					       :tooltip, "" )

#	file_toolbar2 << sw_toolbar_container.new( toolbar, _false,
#						  :background_type, :button_group,
#						  :col_alignment, :fill,
#						  :button_group_height, sw_item.default_item_height )


#	.items[:add_2] << sw_button_item.new( file_toolbar,
#					       :image, {:add_to_layout, :pni_tools},
#					       :model, _self,
#					      # :selector, :get_ur2|()|,
#					       #:enabled?, _false,
#					       :tooltip, "" )


_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.build_label_result2( parent )
	## 
	##
	
	text_container << sw_container.new( parent, _unset, 1, :row_spacing, 5, :outer_spacing, 10)

	.items[:result2] << sw_text_window.new( text_container,
					       :col_alignment, :fill
					  )
	.items[:result2].text <<""
	
	.items[:result2].colour << colour.called(:white)

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.build_label_result( parent )
	## 
	##
	
	text_container << sw_container.new( parent, _unset, 1, :row_spacing, 5, :outer_spacing, 10)

	.items[:result] << sw_text_window.new( text_container,
					       :col_alignment, :fill
					  )
	.items[:result].text <<""
	
	.items[:result].colour << colour.called(:white)

_endmethod
$

_pragma(classify_level=basic, topic={sw2plp,api_client})
_method rw_ur_cables_dialog.build_table_ur1( parent )
	## 
	##
		## Adds screen controls to P_FRAME.
	# ----------
	# Normal setup stuff
	# ----------	
	#	parent.default_resize? << _false
	#parent.title << "A Styled Tree"
	_local l_button_width << 80 # Normally fetched from message
	_local l_rc << rowcol.new(parent, _unset, 1, _unset,
				  :row_resize_values, {100, 0},
				  :resize_x?, _true, :resize_y?, _true)
	# ----------
	# Create style holder with reusable image schemes
	# ----------	
	_local l_style_holder << string_styles_holder.new_with()
	# define image scheme :selected_scheme with closed/open folder icons
	# for selected/unselected elements
	l_style_holder.add_image_scheme(:selected_scheme, :default, :closed_folder, :selected, :open_folder)
	# define image scheme :my_scheme with bitmap resources given as image locators
	# specified by {<bitmap_name>, <module_name>}
	l_style_holder.add_image_scheme(:my_scheme, :default, {"search_world", :tree_examples}, 
	                                            :selected, {"last", :ui_resources})
	# ----------	
	# Create tree_item
	# ----------
	.items[:table] << a_table << 
		tree_item.new(l_rc,
			      :col_alignment, :fill,
			      :row_alignment, :fill,
			      :model,         _self,
			      :style_holder,  l_style_holder, # gives display trees access to defined image schemes
			      :aspect,        :tree_list, # also provides the value of the data_selector property
			      :mode,          :one,
			      :double_click_notifier, :|double_click_selected1()|,
			      :select_notifier, :|selected()|)
#			      

_endmethod
$
_pragma(classify_level=basic, topic={tree_item}, usage={subclassable})
_method rw_ur_cables_dialog.tree_list
	## A list of display trees containing painters, having other
	## painters as child-trees.

	c_parent << rope.new()	
	write(.table_list.size)
	
	# use a set to filter duplicates
	_for a_rec _over .table_list.fast_elements()
	_loop
		
		_for a_rec1 _over .table_list.fast_elements()
		_loop
			_if (a_rec1.is_parent_of?(a_rec)) _is _true _then
				
				_if (c_parent.size>0)
				_then
					_for i _over c_parent.fast_elements()
					_loop
						_if (i.id <> a_rec1.id)
						_then
							c_parent.add(a_rec1)
						_endif
					_endloop 
				_else
					c_parent.add(a_rec1)
				_endif
			_endif 
		_endloop 
	
	_endloop
	
	>> .list << _self.int!tree_list(c_parent.size, c_parent)
_endmethod
$

_pragma(classify_level=basic, topic={tree_item}, usage={subclassable})
_method rw_ur_cables_dialog.int!tree_list(p_size, _optional c_parent,  p_parent)
	## Creates a list of display_tree with P_SIZE elements,
	## optionally attached to P_PARENT; complete display trees are generated.
	##
	## Every display tree contains a painter as key, has its own
	## styled string displaying the default image scheme and,
	## if P_SIZE > 1, has max P_SIZE-1 children.
	#	_local l_list << rope.new_for(p_size)
	_local l_list << rope.new()

	tk << {:conduit_p_c, :ui_resources}

	_for i _over c_parent.fast_elements()
	_loop
	
		_local l_display_tree << display_tree.new( property_list.new_with(:name, i.name, :rc, i, :status, "parent"), _unset, p_parent)
		l_display_tree.styled_string << {:image, tk , i.name + ", " + i.spec_id}
	
		_for a_rec  _over .table_list.fast_elements()
		_loop		
			_if (i.is_parent_of?(a_rec)) _is _true _then					
				_local l_display_tree1 << display_tree.new( property_list.new_with(:name, a_rec.name, :rc, a_rec, :status, "child"), _unset, l_display_tree)
				l_display_tree1.styled_string << {:image, tk , a_rec.name + ", " + a_rec.spec_id }				
			_endif		
		_endloop		
		l_list.add(l_display_tree)
	_endloop

	
	>> l_list
_endmethod
$
_pragma(classify_level=basic, topic={tree_item})
_method rw_ur_cables_dialog.selected(p_selection)
	## Check if there is anything selected, and notify this to
	## update other controls
	_try 
		_for i_display_tree _over p_selection.elements()
		_loop
#			_if (status << i_display_tree.key[:status] = "child")
#			_then
#				i_display_tree.selected? << _false
#			_elif (status << i_display_tree.key[:status] = "parent")
#			_then
			.items[:p_ur1]<< {{:ur1,i_display_tree.key[:rc]}}
#			_endif 
		_endloop
	_when does_not_understand
		.items[:p_ur1]<< _unset 
	_endtry
	
	_self.changed(:anything_selected?, _not p_selection.empty?)
_endmethod
$

_pragma(classify_level=basic, topic={tree_item})
_method rw_ur_cables_dialog.double_click_selected1(p_selection)

	.engine.goto_conduit1(_self, p_selection.key[:rc] )
_endmethod
$
_pragma(classify_level=basic, topic={tree_item})
_method rw_ur_cables_dialog.double_click_selected2(p_selection)

	.engine.goto_conduit2(_self, p_selection.key[:rc] )
_endmethod
$
_pragma(classify_level=basic, topic={sw2plp,api_client})
_method rw_ur_cables_dialog.build_table_ur2( parent )
	## 
	##
			## Adds screen controls to P_FRAME.
	# ----------
	# Normal setup stuff
	# ----------	
	#	parent.default_resize? << _false
	#parent.title << "A Styled Tree"
	_local l_button_width << 80 # Normally fetched from message
	_local l_rc << rowcol.new(parent, _unset, 1, _unset,
				  :row_resize_values, {100, 0},
				  :resize_x?, _true, :resize_y?, _true)
	# ----------
	# Create style holder with reusable image schemes
	# ----------	
	_local l_style_holder << string_styles_holder.new_with()
	# define image scheme :selected_scheme with closed/open folder icons
	# for selected/unselected elements
	l_style_holder.add_image_scheme(:selected_scheme, :default, :closed_folder, :selected, :open_folder)
	# define image scheme :my_scheme with bitmap resources given as image locators
	# specified by {<bitmap_name>, <module_name>}
	l_style_holder.add_image_scheme(:my_scheme, :default, {"search_world", :tree_examples}, 
	                                            :selected, {"last", :ui_resources})
	# ----------	
	# Create tree_item
	# ----------
	.items[:table2] << a_table << 
		tree_item.new(l_rc,
			      :col_alignment, :fill,
			      :row_alignment, :fill,
			      :model,         _self,
			      :style_holder,  l_style_holder, # gives display trees access to defined image schemes
			      :aspect,        :tree_list2, # also provides the value of the data_selector property
			      :mode,          :one,
			      :double_click_notifier, :|double_click_selected2()|,
			      :select_notifier, :|selected2()|)
_endmethod
$
_pragma(classify_level=basic, topic={tree_item}, usage={subclassable})
_method rw_ur_cables_dialog.tree_list2
	## A list of display trees containing painters, having other
	## painters as child-trees.

	c_parent << rope.new()	

	# use a set to filter duplicates
	_for a_rec _over .table_list2.fast_elements()
	_loop
		
		_for a_rec1 _over .table_list2.fast_elements()
		_loop
			_if (a_rec1.is_parent_of?(a_rec)) _is _true _then
				
				_if (c_parent.size>0)
				_then
					_for i _over c_parent.fast_elements()
					_loop
						_if (i.id <> a_rec1.id)
						_then
							c_parent.add(a_rec1)
						_endif
					_endloop 
				_else
					c_parent.add(a_rec1)
				_endif
			_endif 
		_endloop 
	
	_endloop
	
	>> .list2 << _self.int!tree_list2(c_parent.size, c_parent)
_endmethod
$
_pragma(classify_level=basic, topic={tree_item}, usage={subclassable})
_method rw_ur_cables_dialog.int!tree_list2(p_size, _optional c_parent,  p_parent)
	## Creates a list of display_tree with P_SIZE elements,
	## optionally attached to P_PARENT; complete display trees are generated.
	##
	## Every display tree contains a painter as key, has its own
	## styled string displaying the default image scheme and,
	## if P_SIZE > 1, has max P_SIZE-1 children.
	#	_local l_list << rope.new_for(p_size)
	_local l_list << rope.new()
	tk << {:conduit_p_c, :ui_resources}

	_for i _over c_parent.fast_elements()
	_loop
	
		_local l_display_tree << display_tree.new( property_list.new_with(:name, i.name, :rc, i, :status, "parent"), _unset, p_parent)
		l_display_tree.styled_string << {:image, tk , i.name  + ", " + i.spec_id}
	
		_for a_rec  _over .table_list2.fast_elements()
		_loop		
			_if (i.is_parent_of?(a_rec)) _is _true _then					
				_local l_display_tree1 << display_tree.new( property_list.new_with(:name, a_rec.name, :rc, a_rec, :status, "child"), _unset, l_display_tree)
				l_display_tree1.styled_string << {:image, tk , a_rec.name  + ", " + a_rec.spec_id}				
			_endif		
		_endloop		
		l_list.add(l_display_tree)
	_endloop

	
	>> l_list
_endmethod
$

_pragma(classify_level=basic, topic={tree_item})
_method rw_ur_cables_dialog.selected2(p_selection)
	## Check if there is anything selected, and notify this to
	## update other controls
	_try 
		_for i_display_tree _over p_selection.elements()
		_loop		
##			_if (status << i_display_tree.key[:status] = "child")
##			_then
##				i_display_tree.selected? << _false
##			_elif (status << i_display_tree.key[:status] = "parent")
##			_then 
				.items[:p_ur2]<< {{:ur2,i_display_tree.key[:rc]}}					
#			_endif 
	_endloop
	_when does_not_understand
		.items[:p_ur2]<< _unset 
	_endtry
	
	_self.changed(:anything_selected?, _not p_selection.empty?)
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.items
	##
	##
	>> .items
_endmethod
$
_pragma(classify_level=restricted)
$
_method rw_ur_cables_dialog.records
	##
	##
	>> .records
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.get_ur1()
	##
	##
	.items[:add_ur2].enabled? << _true 
	.engine.get_ur1( _self )
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.get_ur2()
	##
	##

	.engine.get_ur2(_self )

_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.get_result()
	##
	##
	
	.table_list.empty()
	.table_list2.empty()
	.current_selection_ur1 << _unset 
	.current_selection_ur2 << _unset 
#	_self.changed(:table_ur1, :refresh)
#	_self.changed(:table_ur2, :refresh)
	_self.int!get_result()
	.items[:check_merge].enabled? << _true
	.items[:clr_selection].enabled? << _true 
	_self.manage_actions()
	
_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.int!get_result()
	##
	##
	
	.engine.int!get_result(_self )

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.clear_selection()

	.items[:p_ur1] << _unset 
	.items[:p_ur2] << _unset 
	.items[:result2].text << ""
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.clear()
	## 
	##


	.records.empty()
	.current_selection_ur1 << _unset 
	.current_selection_ur2 << _unset

	.items[:check_merge].enabled? << _false 
	.items[:clr_selection].enabled? << _false 
	
	.items[:result2].text << ""

	.items[:ur1].text_items << {{:ur1,"Underground Route 1"}}
	.items[:ur2].text_items << {{:ur2,"Underground Route 2"}}
	.items[:p_ur1] << _unset 
	.items[:p_ur2] << _unset 
	
	.items[:add_ur1].enabled? << _true
	.items[:add_ur2].enabled? << _false
	.items[:run_check].enabled? << _true
	.items[:goto1].enabled? << _false
	.items[:goto2].enabled? << _false
	.items[:goto_int1].enabled? << _false
	.items[:goto_int2].enabled? << _false

	.table_list.empty()
	.table_list2.empty()
	_self.changed(:tree_list, :refresh)
	_self.changed(:tree_list2, :refresh)
_endmethod
$

#_pragma(classify_level=restricted)
#_method rw_ur_cables_dialog.get_data_ur(ur1,ur2)
#	##
#	##
#
#	.engine.get_data_ur(ur1, ur2, .table_list, .table_list2, _self )
#
#_endmethod
#$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.populate_ur1( a_table )
	## 
	##

	row << 1
	rd << {:traffic_light_red, :ui_resources}
	gr << {:traffic_light_grey, :ui_resources}
	tk << {:tick, :ui_resources}
	_for a_rec  _over .table_list.fast_elements()
	_loop
		a_table.set_row_data( row, a_rec )
		a_table.add_cell(row, 1, {}, {:label, row.write_string})
		a_table.add_cell( row, 2, {}, {:label, a_rec.external_name })
		a_table.add_cell( row, 3, {}, {:label, a_rec.id })
		a_table.add_cell( row, 4, {}, {:label, a_rec.name })
#		_if .table_list2.includes?(a_rec) _is _false 
#		_then 
#			a_table.add_cell( row, 3, {}, {:image, rd })
#		_else
#			a_table.add_cell( row, 3, {}, {:image, gr })
#		_endif

		

		_for a_rec1 _over .table_list.fast_elements()
		_loop
			_if a_rec1.is_parent_of?(a_rec) _is _true  _then  
				a_table.add_cell( row, 5, {}, {:label, a_rec1.id.write_string })
				_leave
			_else
				a_table.add_cell( row, 5, {}, {:image, tk })
			_endif
		_endloop

		_for a_rec1 _over .table_list2.fast_elements()
		_loop
			_if a_rec1.id = a_rec.id _then  
				a_table.add_cell( row, 6, {}, {:image, gr })
				a_table.enable_row( row, _false)
				_leave
			_else
				a_table.add_cell( row, 6, {}, {:image, rd })
			_endif
		_endloop
		
		
		row +<< 1
	_endloop

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.get_data_ur2(ur2)
	##
	##
	
	.engine.get_data_ur2(ur2, .table_list2, _self )

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.populate_ur2( a_table )
	## 
	##
	
	row << 1
	rd << {:traffic_light_red, :ui_resources}
	gr << {:traffic_light_grey, :ui_resources}
	tk << {:tick, :ui_resources}
	
	_for a_rec  _over .table_list2.fast_elements()
	_loop
	
		a_table.set_row_data( row, a_rec )
		a_table.add_cell(row, 1, {}, {:label, row.write_string})
		a_table.add_cell( row, 2, {}, {:label, a_rec.external_name })
		a_table.add_cell( row, 3, {}, {:label, a_rec.id })
		a_table.add_cell( row, 4, {}, {:label, a_rec.name })
#		_if .table_list.includes?(a_rec) _is _false 
#		_then 
#			a_table.add_cell( row, 3, {}, {:image, rd })
#		_else
#			a_table.add_cell( row, 3, {}, {:image, gr })
#		_endif

	

		_for a_rec2 _over .table_list2.fast_elements()
		_loop
			_if a_rec2.is_parent_of?(a_rec) _is _true  _then  
				a_table.add_cell( row, 5, {}, {:label, a_rec2.id.write_string })
				_leave
			_else
				a_table.add_cell( row, 5, {}, {:image, tk })
			_endif
		_endloop

		_for a_rec2 _over .table_list.fast_elements()
		_loop
			_if a_rec2.id = a_rec.id _then  
				a_table.add_cell( row, 6, {}, {:image, gr })
				a_table.enable_row( row, _false)
				_leave
			_else
				a_table.add_cell( row, 6, {}, {:image, rd })
			_endif
		_endloop
				
		row +<< 1
	_endloop

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.table_selected_ur1( selection )
	## 
	##
	_global sel
	sel << selection
	.current_selection_ur1 << selection.get_row_data_from_selection().an_element()	

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.table_selected_ur2( selection )
	## 
	##
	_global sel
	sel << selection
	.current_selection_ur2 << selection.get_row_data_from_selection().an_element()	
_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.goto1()
	## 
	##

	.engine.goto1(_self )

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.goto2()
	## 
	##

	.engine.goto2(_self )

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.goto_int1()
	## 
	##

	.engine.goto_int1(_self )

_endmethod
$


_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.goto_int2()
	## 
	##

	.engine.goto_int2(_self )
	

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.open_editor_ur1()


	_self.changed(:table_ur1, :refresh)
	_if .current_selection_ur1 _is _unset _then
		_return 
	_endif 	

	ef << .ed.display_object_in_embedded_editor(.current_selection_ur1)
	obj1 << .current_selection_ur1.get_spatial_context(:cross_section)
	#.mapman.goto(internals_sc)
	#.owner.databus.make_data_available(:geometry_to_highlight, internals_sc)
	.grs.databus.make_data_available(:goto_request,{obj1, :highlight?, _true})

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.open_editor_ur2()
	##
	##
	_self.changed(:table_ur1, :refresh)
	_if .current_selection_ur2 _is _unset _then
		_return 
	_endif
	
	ef << .ed.display_object_in_embedded_editor(.current_selection_ur2)
	obj2 << .current_selection_ur2.get_spatial_context(:cross_section)
	#.mapman.goto(internals_sc)
	#.owner.databus.make_data_available(:geometry_to_highlight, internals_sc)
	.grs.databus.make_data_available(:goto_request,{obj2, :highlight?, _true})

_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.current_selection_ur1
	##
	##

	>> .current_selection_ur1

_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.current_selection_ur2
	##
	##

	>> .current_selection_ur2

_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.table_list
	##
	##

	>> .table_list

_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.table_list2
	##
	##

	>> .table_list2

_endmethod
$
_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.check_merge()
	##
	##

	.engine.check_merge(_self )

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.manage_actions()
	## 
	##

	.table_list.empty? _andif .table_list2.empty?.not

_endmethod
$

_pragma(classify_level=restricted)
_method rw_ur_cables_dialog.wm_close()
	## 
	## 
	_self.clear()
	_self.close()
_endmethod
$

